'use strict';

const app = require('../../server/server.js'),
  fixtures = require('@checkit/checkit-database-fixtures')(app);

module.exports = {
  createMainFixture: createMainFixture,
  createAclFixture: createAclFixture
};

function createMainFixture() {
  //  Elektron
  //    Elektron Burger Van
  //      Kitchen
  //        Sub Kitchen
  //      Kitchen 2
  //    I am deleted

  let customer,
    token,
    user,
    user2,
    vanSafetyManager,
    root,
    burgerVan,
    kitchen,
    subKitchen,
    kitchen2,
    deleted,
    handheld,
    zigbeeDevice,
    hub;

  fixtures.tearDown();
  customer = new fixtures.Customer();

  user = customer.addUser();
  user2 = customer.addUser();
  vanSafetyManager = customer.addUser();
  root = customer.addLocation({ name: 'Elektron' });

  handheld = customer.addHandheld();
  zigbeeDevice = customer.addZigbeeDevice({
    type: 'K100',
    displayName: 'temperature',
    productId: 100,
    macAddress: 'AA-BB-CC-DD-EE'
  });
  root.putZigbeeDevice(zigbeeDevice);

  hub = customer.addHub({
    displayName: 'hub1',
    serialNumber: 123,
    localId: '001'
  });
  root.putHub(hub);

  return root.get()
    .then(rootData => {
      burgerVan = customer.addLocation({
        name: 'Elektron Burger Van',
        parentEntityId: rootData.id.entityId,
        localId: '001'
      });
      root.putSafetyManager(user);
      burgerVan.putAdministrator(user);
      burgerVan.putSafetyManager(vanSafetyManager);
      burgerVan.putHandheld(handheld);
      deleted = customer.addLocation({ name: 'I am deleted', parentEntityId: rootData.id.entityId });
      deleted.putHandheld(handheld);
      deleted.putAdministrator(user);
      return burgerVan.get();
    })
    .then(burgerVanData => {
      kitchen = customer.addLocation({ name: 'Kitchen', parentEntityId: burgerVanData.id.entityId });
      kitchen2 = customer.addLocation({ name: 'Kitchen 2', parentEntityId: burgerVanData.id.entityId });
      kitchen2.putAdministrator(user2);
      kitchen2.putSafetyManager(user2);
      return Promise.all([ kitchen.get(), kitchen2.get() ]);
    })
    .then(kitchensData => {
      subKitchen = customer.addLocation({ name: 'Sub Kitchen', parentEntityId: kitchensData[0].id.entityId });
      return zigbeeDevice.get();
    })
    .then(zigbeeDeviceData => {
      customer.addReport({
        zigbeeReport: {
          zigbeeDeviceId: {
            entityId: zigbeeDeviceData.id.entityId,
            version: zigbeeDeviceData.id.version
          },
          value: 300
        },
        eventType: 'zigbeeReport',
        observedTime: 1453469542000,
        observedTimeZoneId: 'Europe/London',
        locationId: {
          entityId: root.resolvedData.id.entityId,
          version: root.resolvedData.id.version
        }
      });

      customer.addReport({
        checkReport: {
          name: 'Test 1'
        },
        eventType: 'checkReport',
        observedTime: 1440403048536.0000000000000000,
        locationId: {
          entityId: root.resolvedData.id.entityId,
          version: root.resolvedData.id.version
        },
        raisesAlert: true
      });


      customer.addReport({
        eventType: 'zigbeeBatteryAlert',
        observedTime: 1440403048536.0000000000000000,
        locationId: {
          entityId: root.resolvedData.id.entityId,
          version: root.resolvedData.id.version
        },
        raisesAlert: true
      });

      customer.addReport({
        eventType: 'jobOverdue',
        observedTime: 1440403048536.0000000000000000,
        locationId: {
          entityId: root.resolvedData.id.entityId,
          version: root.resolvedData.id.version
        },
        raisesAlert: true
      });

      customer.addReport({
        sensorAlert: {
          value: 2
        },
        eventType: 'sensorAlert',
        observedTime: 1462802045688,
        locationId: {
          entityId: root.resolvedData.id.entityId,
          version: root.resolvedData.id.version
        },
        raisesAlert: true
      });
    })
    .then(() => user.accessToken)
    .then(_token => token = _token.id)
    .then(() => fixtures.afterFlow())
    .then(() => {
      return {
        customer: customer,
        token: token,
        user: user,
        user2: user2,
        root: root,
        burgerVan: burgerVan,
        kitchen: kitchen,
        subKitchen: subKitchen,
        kitchen2: kitchen2,
        deleted: deleted,
        handheld: handheld,
        zigbeeDevice: zigbeeDevice,
        hub: hub,
        vanSafetyManager: vanSafetyManager
      };
    });
}

/**
 * Create a simple ACL fixture test
 * @returns {Promise.<TResult>|*}
 */
function createAclFixture() {
  fixtures.tearDown();
  let customer = new fixtures.Customer();
  let root = customer.addLocation();
  let admin1 = customer.addUser();
  let admin2 = customer.addUser();
  let supervisor = customer.addUser();
  customer.addTeam().putSupervisor(supervisor);
  root.addChild().addChild().putAdministrator(admin1).putAdministrator(admin2);
  root.addChild().addChild();
  root.addChild().addChild().putAdministrator(admin1).putAdministrator(admin2);
  return fixtures.afterFlow()
    .then(() => {
      return {admin1: admin1, admin2: admin2, supervisor: supervisor };
    });
}
